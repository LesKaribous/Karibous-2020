#ifndef DEF_IHM
#define DEF_IHM

#include <Arduino.h>
#include <U8g2lib.h>
#include <SPI.h>

// Declaration du logo des Karibous
static unsigned char _LOGO_KARIBOUS_bits[] = {
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0xfc, 0xf9, 0x03,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x1c, 0xfc, 0xfb, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x1c, 0xfc, 0xfb, 0x03, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x04, 0x0b, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x1c, 0xfc, 0xf9, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x1c, 0x0c, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0xfc, 0x39, 0x03,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0xfc, 0xf9, 0xf9, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0xfc, 0x01, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x0f, 0xc0, 0x01,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xe0, 0xc3, 0x1f,
   0xe0, 0xff, 0xc7, 0xf3, 0xff, 0x81, 0xff, 0x87, 0x0f, 0x38, 0xfc, 0x3f,
   0xfc, 0xf0, 0xc1, 0xff, 0xe1, 0xff, 0xcf, 0xf3, 0xff, 0xc3, 0xff, 0x8f,
   0x0f, 0x38, 0xfe, 0x3f, 0xfc, 0xf8, 0xc0, 0xff, 0xe3, 0xff, 0xdf, 0xf3,
   0xff, 0xe7, 0xff, 0x9f, 0x0f, 0x38, 0xfe, 0x3f, 0xfc, 0xf8, 0xc0, 0xff,
   0xe7, 0xff, 0xdf, 0xf3, 0xff, 0xe7, 0xff, 0x9f, 0x0f, 0x38, 0xff, 0x1f,
   0xfc, 0x7c, 0xc0, 0xff, 0xe7, 0xff, 0xdf, 0xf3, 0xff, 0xe7, 0xff, 0x9f,
   0x0f, 0x38, 0xff, 0x1f, 0xfc, 0x3e, 0xc0, 0xff, 0xe7, 0xff, 0xdf, 0xf3,
   0xff, 0xe7, 0xff, 0x9f, 0x0f, 0x38, 0xff, 0x1f, 0xfc, 0x1f, 0x00, 0xf0,
   0x67, 0x00, 0xde, 0xf3, 0x00, 0xe7, 0x01, 0x9e, 0x0f, 0x38, 0x0f, 0x00,
   0xfc, 0x0f, 0x00, 0x00, 0x67, 0x00, 0xde, 0xf3, 0x00, 0xe3, 0x01, 0x9e,
   0x0f, 0x38, 0x0f, 0x00, 0xfc, 0x0f, 0xe0, 0xff, 0xe7, 0xff, 0xdf, 0xf3,
   0xff, 0xe1, 0x01, 0x9e, 0x0f, 0x38, 0xfe, 0x1f, 0xfc, 0x1f, 0xf0, 0xff,
   0xe7, 0xff, 0xcf, 0xf3, 0xff, 0xe3, 0x01, 0x9e, 0x0f, 0x3c, 0xfc, 0x3f,
   0xfc, 0x1f, 0x70, 0xc0, 0xe7, 0xff, 0xc7, 0x71, 0x80, 0xe7, 0x01, 0x8e,
   0x0f, 0x3c, 0x00, 0x3f, 0xfc, 0x3f, 0x70, 0x00, 0xe7, 0xf9, 0xc1, 0x71,
   0x80, 0xe7, 0x01, 0x8e, 0x0f, 0x1c, 0x00, 0x38, 0x7c, 0x7e, 0xf0, 0x01,
   0xe7, 0xf1, 0xc0, 0xf1, 0xff, 0xe7, 0x01, 0x8e, 0xff, 0x1f, 0x1e, 0x38,
   0x3c, 0x7c, 0xf0, 0xff, 0xe7, 0xf1, 0xc0, 0xf1, 0xff, 0xe7, 0xff, 0x0f,
   0xff, 0x1f, 0xfe, 0x3f, 0x3c, 0xfc, 0xf0, 0xff, 0xe7, 0xe1, 0xc1, 0xf1,
   0xff, 0xc3, 0xff, 0x0f, 0xff, 0x1f, 0xfe, 0x3f, 0x3c, 0xf8, 0xe1, 0xff,
   0xe7, 0xe1, 0xc3, 0xf1, 0xff, 0x81, 0xff, 0x07, 0xfe, 0x0f, 0xfe, 0x1f,
   0x38, 0xf0, 0x03, 0x7f, 0xe7, 0xc1, 0xc7, 0xf1, 0xff, 0x00, 0xf8, 0x03,
   0xf8, 0x07, 0xf8, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };


class IHM
{
  public:
      IHM();
      ~IHM();

      void updateButtonIHM  ();
      //------ Gestion des E/S ------
      bool getTirette       ();
      bool getDetection     ();
      bool getStrategie     ();
      bool getCheck         ();
      bool getTypeRobot     ();
      bool getEquipe        ();

      //------ Pages LCD ------
      void prepare          ();
      void splashScreen     ();
      void menuScreen       ();
      void initScreen       ();
      void checkListScreen  ();
      void goScreen         ();
      void matchScreen      (int score,int tempsRestant,int nbrBadCRC);



  private:
    // Adversaire
    const bool _ADVERSAIRE_NON = 1 ;
    const bool _ADVERSAIRE_OUI = 0 ;

    // Couleur Equipe
    const bool _EQUIPE_JAUNE = 1 ;
    const bool _EQUIPE_VIOLET = 0 ;

    // Strategie
    const bool _STRATEGIE_HOMOLOGATION = 1 ;
    const bool _STRATEGIE_MATCH = 0 ;

    // type de Robot
    const bool _ROBOT_PRIMAIRE = 1 ;
    const bool _ROBOT_SECONDAIRE = 0 ;

    // Autres
    const int _TEMPS_MATCH = 101000 ;

    // Declaration des pins IHM
    const int _pinTirette = 39 ;         // Pin tirette
    const int _pinDetection = 37 ;       // Pin activation de la detection
    const int _pinStrategie = 38 ;       // Pin choix de strategie
    const int _pinEquipe = A21;          // Pin choix d'Ã©quipe
    const int _pinCheck = A22;           // Pin bouton checklist
    const int _pinTypeRobot = 4;            // Pin jumper type de robot
    
    // Logo Karibous
    const byte _LOGO_KARIBOUS_width = 128 ;
    const byte _LOGO_KARIBOUS_height = 33 ;

    // Declaration des variables IHM
    bool _tirette = false ,_detection = false , _strategie = false , _check = false , _typeRobot = _ROBOT_PRIMAIRE , _equipe = _EQUIPE_VIOLET ;
    // Liste d'action de la check list:
    char* _titreList[6] = {
                     "Robot",
                     "Experi.",
                     "Palets",
                     "Table",
                     "Balise",
                     "GO !"};
    // Liste d'action de la check list:
    char* _list[6] = {
                     "Installer le robot secondaire ",
                     "Installer l'experience        ",
                     "Verifier les palets           ",
                     "Nettoyer la table             ",
                     "Poser la balise adversaire    ",
                     "Bon match !                   "};

};

#endif
